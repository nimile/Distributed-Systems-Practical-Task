openapi: '3.0.2'
info:
  title: Rest API 1 Implementation 
  version: '1.0'
servers:
  - url: 127.0.0.1:8080
paths:
  /users:
    get:
      tags:
        - "Users"
      summary: Request a list of all users
      description: This method returns a list of all existing users.<br>
        If no user exists an empty list is returned.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserList'

    post:
      tags:
        - "Users"
      summary: Create a new user
      description: "Requires a json object as request body.<br>
        To identify user objects the provided json object must contain at least a email address.<br>
        <ul>
          Following codes can be yield
          <li><b>OK:</b> Operation succeed</li>
          <li><b>ALREADY REPORTED:</b> The user already exists</li>
          <li><b>UNPROCESSABLE ENTITY</b>: The requestbody or email is missing</li>
          <li><b>INTERNAL SERVER ERROR</b>: This status should never thrown</li>
        </ul>"
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/postUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '422':
          description: UNPROCESSABLE_ENTITY
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Exception'
        '208':
          description: ALREADY_REPORTED
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Exception'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Exception'

    put:
      tags:
        - "Users"
      summary: Updates a list of users.
      description: This method takes a list of user objects and updates them if they exists.<br>
        It will return a json object containing how many users are updated
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageContainer'
 
    delete:
      tags:
        - "Users"
      summary: Deletes all existing users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageContainer'
  /users/{id}:
    get:
      tags:
        - "Users/{id}"
      summary: Request information about a user
      description: "This method returns a details about an users.<br>
        <ul>Following codes can be yield
        <li><b>OK:</b> The user was successful returned</li>
        <li><b>NOT FOUND:</b> There is no user associated with given id</li>
        </ul>"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the desired user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Exception'

    post:
      tags:
        - "Users/{id}"
      summary: Not allowed
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the desired user
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Exception'
  
    put:
      tags:
        - "Users/{id}"
      summary: Updates information about a user
      description: "This method updates the user associated with given id<br>
        <ul>Following codes can be yield
        <li><b>OK:</b> The user was successful deleted</li>
        <li><b>CONFLICT: </b>The given id does not match the id specified by the body</li>
       <li><b>UNPROCESSABLE_ENTITY: </b> The body is missing</li>
        </ul>"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the desired user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/postUser'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Exception'
        '422':
          description: UNPROCESSABLE_ENTITY
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Exception'

    delete:
      tags:
        - "Users/{id}"
      summary: Deletes the user specified by id
      responses:
        '200':
          description: OK

  /products:
    get:
      tags:
        - "Products"
      summary: Request a list of all products
      description: This method returns a list of all existing products.<br>
        If no product exists an empty list is returned.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

    post:
      tags:
        - "Products"
      summary: Create a new product
      description: "Requires a json object as request body.<br>
        <ul>
          Following codes can be yield
          <li><b>OK:</b> Operation succeed</li>
          <li><b>UNPROCESSABLE ENTITY</b>: The requestbody is missing</li>
          <li><b>INTERNAL SERVER ERROR</b>: This status should never thrown</li>
        </ul>"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postProduct'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '422':
          description: UNPROCESSABLE_ENTITY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

    put:
      tags:
        - "Products"
      summary: Updates a list of products.
      description: This method takes a list of product objects and updates them if they exists.<br>
        It will return a json object containing how many products are updated
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageContainer'

    delete:
      tags:
        - "Products"
      summary: Deletes all existing users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageContainer'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          description: Automatic generated ID for the object
          format: int64
          type: integer
        firstname:
          type: string
          example: John
        lastname: 
          type: string
          example: Doe
        email: 
          type: string
          example: john.doe@provider.domain
        address: 
          type: string
          example: Zero Av. Generic Town
        password: 
          type: string
          example: ThisIsAnInsecurePassword
    Product:
      type: object
      properties:
        id:
          description: Automatic generated ID for the object
          type: integer
          format: int64
        brand:
          type: string
          example: Generic brand
        name:
          type: string
          example: Generic product name
        newPrice: 
          type: number
          example: 79.99
        oldPrice: 
          type: number
          example: 89.99
    Review:
      type: object
      properties:
        id:
          description: Automatic generated ID for the object
          type: integer
          format: int64
        publisher:
          type: string
        text: 
          type: string
        starRating: 
          type: number
  
    UserList:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/User'
    ProductList:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/Product'
    ReviewList:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/Review'


    postUser:
      type: object
      properties:
        email:
          description: Unique email address
          type: string
          example: john.doe@provider.domain
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        address:
          type: string
          example: Zero Av. Generic Town
        password:
          type: string
          example: ThisIsAnInsecurePassword
      required:
        - "email"
    postProduct:
      type: object
      properties:
        brand:
          type: string
          example: Generic brand name
        name:
          type: string
          example: Generic product name
        newPrice:
          type: number
          example: 79.99

    MessageContainer:
      type: object
      properties:
        message: 
          description: Message of the container
          type: string
        data:
          description: Data of the container
          oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
            - type: object

    Exception:
      type: object
      properties:
        timestamp:
          type: string
          example: 2021-11-21T23:22:27.744+00:00
        status:
          type: integer
          format: int64
          description: HTTP status code
        error: 
          type: string
          description: Name of the status code
          example: Name of the http status code
        trace: 
          type: string
          description: Stacktrace of the exception
          example: ...
        message:
          type: string
          description: Message of the exception
          example: Message of the exception
        path:
          type: string
          description: Endpoint path where the exception occurred
          example: Endpoint path where the exception occurred
